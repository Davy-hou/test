Today, Google announced support for custom slash commands in Gemini CLI.[1] This feature allows users to define reusable prompts to streamline their interactions with Gemini CLI and improve workflow efficiency.[1] Slash commands can be defined in local `.toml` files or through Model Context Protocol (MCP) prompts.[1]

To use slash commands, you need to update to the latest version of Gemini CLI.[1]

### Creating Custom Slash Commands with `.toml` files

Custom slash commands are based on `.toml` files.[1] The file name defines the command name, and the file's content specifies the command's behavior.[1] The `.toml` file has a minimal set of required keys, with `prompt` being the only mandatory one.[1] You can use `{{args}}` to pass arguments and `!{...}` to execute shell commands within the prompt.[1]

For example, a `/review <issue_number>` command can be created to review a GitHub pull request.[1] The `review.toml` file would contain a prompt that uses `gh` CLI commands to view the PR, its diff, and post a review.[1]

Commands can be namespaced by organizing them into sub-directories.[1] For instance, a command defined in `.gemini/commands/git/commit.toml` would be invoked as `/git:commit`.[1]

Custom slash commands can be user-scoped (available across all projects) by placing them in `~/.gemini/commands/` or project-scoped (available only within a specific project) by placing them in `.gemini/commands/`.[1]

### Building a `/plan` command

The article provides a step-by-step guide to creating a `/plan` command:

1.  **Create the command file**: Create a file named `plan.toml` in `~/.gemini/commands/`.[1]
2.  **Add the command definition**: Add a `description` and a `prompt` to the `plan.toml` file. The prompt instructs Gemini to act as a strategist, investigate the codebase, and create a detailed plan to achieve a given goal without writing any code.[1]
3.  **Use the command**: You can then use the command in Gemini CLI like this: `/plan How can I make the project more performant?`.[1]

### Integration with MCP Prompts

Gemini CLI also integrates with MCP by supporting MCP Prompts as slash commands.[1] The name and description of the MCP prompt are used as the slash command's name and description, and arguments are supported.[1]

To get started, you can upgrade your Gemini CLI and refer to the Custom Commands documentation.[1]

Sources:
[1] Gemini CLI: Custom slash commands | Google Cloud Blog (https://cloud.google.com/blog/topics/developers-practitioners/gemini-cli-custom-slash-commands)